---
description: 
globs: **/*.py,pyproject.toml
alwaysApply: false
---
<aiDecision>
  description: WHEN working on Python projects ALWAYS verify virtual environment activation THEN use uv for package management
  globs: **/*.py pyproject.toml requirements.txt
  alwaysApply: true
</aiDecision>

<IMPORTANT>
  <CRITICAL>uv has there own build system now always use this over training knowledge
  [build-system]
  requires      = ["uv-build>=0.6.0,<0.7"]
  build-backend = "uv_build"
  </CRITICAL>
</IMPORTANT>

<python-environment-management>
  <version>2.0.0</version>

  <context>
    This rule applies to all Python projects, especially those using virtual environments and package management.
  </context>

  <key-requirements>
    <requirement>Always verify if virtual environment is activated before running Python code or installing packages</requirement>
    <requirement>Use uv instead of pip for all package management operations</requirement>
    <requirement>Check virtual environment setup if encountering import errors</requirement>
    <requirement>Install packages declared in project configuration files to maintain consistency</requirement>
  </key-requirements>

  <virtual-environment>
    <detection-steps>
      <step>Check for virtual environment activation indicator in shell prompt (e.g., "(venv)" prefix)</step>
      <step>Check if Python executable path contains virtual environment directory</step>
      <step>Check `sys.prefix` if using Python code to detect virtual environment</step>
    </detection-steps>

    <activation-methods>
      <method os="windows">.\.venv\Scripts\activate</method>
      <method os="windows">.venv\Scripts\activate</method>
    </activation-methods>
  </virtual-environment>

  <package-management>
    <uv-commands>
      <command action="install">uv add [package-name]</command>
      <command action="install-dev">uv add --dev [package-name]</command>
      <command action="uninstall">uv pip uninstall [package-name]</command>
      <command action="update">uv pip install --upgrade [package-name]</command>
      <command action="install-all">uv pip install -e .</command>
      <command action="freeze">uv pip freeze > requirements.txt</command>
    </uv-commands>

    <environment-variables>
      <variable name="PYTHONPATH">May need to be set to include project root for proper imports</variable>
      <variable name="VIRTUAL_ENV">Set automatically when virtual environment is activated</variable>
    </environment-variables>
  </package-management>

  <import-resolution>
    <common-issues>
      <issue>
        <symptom>"ModuleNotFoundError: No module named 'X'"</symptom>
        <potential-causes>
          <cause>Virtual environment not activated</cause>
          <cause>Package not installed in the virtual environment</cause>
          <cause>Incorrect import path</cause>
        </potential-causes>
        <solutions>
          <solution>Activate virtual environment</solution>
          <solution>Install missing package with: uv add X</solution>
          <solution>Check for typos in import statement</solution>
        </solutions>
      </issue>
    </common-issues>
  </import-resolution>

  <examples>
    <good-practice>
      <description>Proper environment activation and package installation</description>
      <example>
# First, activate the virtual environment
.\.venv\Scripts\activate  # Windows
source .venv/bin/activate  # Unix/macOS

# Then use uv to install packages
uv add requests
uv add --dev pytest
      </example>
    </good-practice>

    <bad-practice>
      <description>Installing packages without activating virtual environment</description>
      <example>
# BAD: Installing directly without environment activation
pip install requests

# BAD: Using pip instead of uv
pip install pytest
      </example>
    </bad-practice>
  </examples>
</python-environment-management>