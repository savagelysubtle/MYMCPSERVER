/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LastPositionPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// .language/translations.ts
var import_obsidian = require("obsidian");
function getTranslation() {
  const lang = (0, import_obsidian.getLanguage)();
  const t = TRANSLATIONS[lang] || TRANSLATIONS["en"];
  return t;
}
function getLanguage() {
  return (0, import_obsidian.getLanguage)();
}
var TRANSLATIONS = {
  zh: {
    currentHeight: "\u5F53\u524D\u9AD8\u5EA6",
    autoSave: "\u81EA\u52A8\u4FDD\u5B58",
    autoSaveDesc: "\u8BBE\u7F6E\u81EA\u52A8\u4FDD\u5B58\u65F6\u95F4\uFF0C\u95F4\u9694\u5355\u4F4D\u4E3A\u79D2,\u9ED8\u8BA4\u4E3A3\u79D2\uFF0C\u4E0B\u6B21\u542F\u52A8\u751F\u6548",
    inputInterval: "\u8F93\u5165\u65F6\u95F4\u95F4\u9694\uFF08\u79D2\uFF09",
    retryCount: "\u91CD\u8BD5\u6B21\u6570",
    retryCountDesc: "\u8BBE\u7F6E\u91CD\u8BD5\u7B56\u7565\u7684\u6700\u5927\u91CD\u8BD5\u6B21\u6570\uFF0C\u9ED8\u8BA4\u4E3A30\u6B21\u3002\u26A0\u8BF7\u8C28\u614E\u66F4\u6539\uFF01",
    inputRetryCount: "\u8F93\u5165\u91CD\u8BD5\u6B21\u6570",
    listenEvent: "\u76D1\u542C\u4E8B\u4EF6",
    listenEventDesc: "\u8BBE\u7F6E\u76D1\u542C\u4E8B\u4EF6\u7528\u4E8E\u89E6\u53D1\u6EDA\u52A8\u9AD8\u5EA6\u4FDD\u5B58\uFF0C\u9ED8\u8BA4\u4E3Amouseover",
    mouseOver: "\u9F20\u6807\u60AC\u505C(mouseover)",
    click: "\u9F20\u6807\u70B9\u51FB(click)",
    scroll: "\u6EDA\u52A8(scroll)",
    language: "\u8BED\u8A00",
    languageDesc: "\u5207\u6362\u754C\u9762\u8BED\u8A00 (Switch interface language)",
    scrollData: "\u6587\u4EF6\u6EDA\u52A8\u9AD8\u5EA6\u6570\u636E",
    scrollDataDesc: "\u4EE5\u4E0B\u662F\u5B58\u50A8\u7684\u6587\u4EF6\u6EDA\u52A8\u9AD8\u5EA6\u6570\u636E\uFF1A",
    undefined: "\u672A\u5B9A\u4E49",
    delete: "\u5220\u9664",
    changeSuccess: "\u66F4\u6539\u6210\u529F",
    restartNotice: "\u66F4\u6539\u6210\u529F,\u91CD\u542F\u63D2\u4EF6\u751F\u6548",
    noActiveView: "\u5F53\u524D\u6CA1\u6709\u6D3B\u52A8\u7684 Markdown \u89C6\u56FE",
    getFileError: "\u83B7\u53D6\u6587\u4EF6\u5BF9\u8C61\u5931\u8D25",
    retryLimit: "\u91CD\u8BD5\u6B21\u6570\u8FBE\u5230\u4E0A\u9650\uFF0C\u505C\u6B62\u91CD\u8BD5",
    table_fileName: "\u6587\u4EF6\u540D",
    table_scrollHeight: "\u6EDA\u52A8\u9AD8\u5EA6",
    table_actions: "\u64CD\u4F5C",
    noDataAvailable: "\u6CA1\u6709\u6570\u636E\u53EF\u7528",
    confirmClearTitle: "\u6E05\u9664\u6570\u636E\u786E\u8BA4",
    confirmClearMessage: "\u786E\u8BA4\u5220\u9664\u6B64\u6761\u6570\u636E\uFF1F",
    confirmed: "\u786E\u8BA4",
    cancel: "\u53D6\u6D88",
    pageSize: "\u6BCF\u9875\u663E\u793A\u6761\u76EE\u6570",
    pageSizeDesc: "\u8BBE\u7F6E\u8868\u683C\u6BCF\u9875\u663E\u793A\u7684\u6761\u76EE\u6570\uFF0C\u9ED8\u8BA410\u6761",
    totalItems: "\u603B\u6761\u76EE\u6570",
    prevPage: "\u4E0A\u4E00\u9875",
    nextPage: "\u4E0B\u4E00\u9875",
    table_lastAccessed: "\u6700\u540E\u8BBF\u95EE\u65F6\u95F4",
    never: "\u4ECE\u672A",
    exportData: "\u5BFC\u51FA\u6570\u636E",
    importData: "\u5BFC\u5165\u6570\u636E",
    noDataToExport: "\u6CA1\u6709\u53EF\u5BFC\u51FA\u7684\u6570\u636E",
    dataExported: "\u6570\u636E\u5BFC\u51FA\u6210\u529F",
    dataImported: "\u5DF2\u5BFC\u5165 {count} \u6761\u6EDA\u52A8\u4F4D\u7F6E\u8BB0\u5F55",
    importError: "\u5BFC\u5165\u6570\u636E\u65F6\u51FA\u9519\u3002\u8BF7\u68C0\u67E5\u6587\u4EF6\u683C\u5F0F\u3002",
    dataManagement: "\u6570\u636E\u7BA1\u7406",
    enableAutoCleanup: "\u542F\u7528\u81EA\u52A8\u6E05\u7406",
    enableAutoCleanupDesc: "\u542F\u7528\u81EA\u52A8\u6E05\u7406\uFF0C\u81EA\u52A8\u6E05\u7406\u8FC7\u671F\u7684\u6570\u636E",
    dataImportExport: "\u6570\u636E\u5BFC\u5165\u5BFC\u51FA",
    dataImportExportDesc: "\u6570\u636E\u5BFC\u5165\u5BFC\u51FA",
    cleanupDays: "\u6570\u636E\u6E05\u7406\u5929\u6570",
    cleanupDaysDesc: "\u8BBE\u7F6E\u8981\u6E05\u7406\u7684\u6570\u636E\u8DDD\u4ECA\u672A\u66FE\u8BBF\u95EE\u7684\u5929\u6570\uFF0C\u9ED8\u8BA430\u5929",
    cleanupDaysNotice: "\u6570\u636E\u81EA\u52A8\u6E05\u7406\u8BBE\u7F6E\u5DF2\u66F4\u6539\uFF0C\u542F\u52A8\u63D2\u4EF6\u65F6\u751F\u6548"
  },
  en: {
    currentHeight: "Current Height",
    autoSave: "Auto Save",
    autoSaveDesc: "Set auto-save interval in seconds, default is 3 seconds, effective after restart",
    inputInterval: "Enter interval (seconds)",
    retryCount: "Retry Count",
    retryCountDesc: "Set maximum retry count for retry strategy. Default is 30. \u26A0 Change with caution!",
    inputRetryCount: "Enter retry count",
    listenEvent: "Listen Event",
    listenEventDesc: "Set trigger event for saving scroll height, default is mouseover",
    mouseOver: "Mouse Over (mouseover)",
    click: "Click (click)",
    scroll: "Scroll (scroll)",
    language: "Language",
    languageDesc: "Switch interface language (\u5207\u6362\u754C\u9762\u8BED\u8A00)",
    scrollData: "File Scroll Height Data",
    scrollDataDesc: "Below is the stored file scroll height data:",
    undefined: "undefined",
    delete: "Delete",
    changeSuccess: "Changed successfully",
    restartNotice: "Changed successfully, restart plugin to take effect",
    noActiveView: "No active Markdown view",
    getFileError: "Failed to get file object",
    retryLimit: "Retry limit reached, stopping retries",
    table_fileName: "File Name",
    table_scrollHeight: "Scroll Height",
    table_actions: "Actions",
    noDataAvailable: "No data available",
    confirmClearTitle: "Confirm Clear Data",
    confirmClearMessage: "Are you sure you want to clear this data?",
    confirmed: "Confirmed",
    cancel: "Cancel",
    pageSize: "Page Size",
    pageSizeDesc: "Set the number of entries to display per page in the table, default is 10",
    totalItems: "Total Items",
    prevPage: "Previous Page",
    nextPage: "Next Page",
    table_lastAccessed: "Last Accessed",
    never: "Never",
    exportData: "Export Data",
    importData: "Import Data",
    noDataToExport: "No data to export",
    dataExported: "Data exported successfully",
    dataImported: "Imported {count} scroll position records",
    importError: "Error importing data. Please check the file format.",
    dataManagement: "Data Management",
    enableAutoCleanup: "Enable Auto Cleanup",
    enableAutoCleanupDesc: "Enable auto cleanup, automatically clean up expired data",
    dataImportExport: "Data Import Export",
    dataImportExportDesc: "Data Import Export",
    cleanupDays: "Cleanup Days",
    cleanupDaysDesc: "Automatically remove data entries older than this many days (minimum 7 days)",
    cleanupDaysNotice: "Cleanup setting have been changed, take effect after restarting the plugin"
  }
};

// src/setting.ts
var import_obsidian4 = require("obsidian");

// src/component/confirmedModal.ts
var import_obsidian2 = require("obsidian");
function getTranslation2() {
  const lang = (0, import_obsidian2.getLanguage)();
  const t = TRANSLATIONS[lang] || TRANSLATIONS["en"];
  return t;
}
var ConfirmModal = class extends import_obsidian2.Modal {
  constructor(app, {
    title,
    message,
    confirmText,
    cancelText
  } = {}) {
    super(app);
    this.result = false;
    const t = getTranslation2();
    this.title = title || t.confirmClearTitle;
    this.message = message || t.confirmClearMessage;
    this.confirmText = confirmText || t.confirmed;
    this.cancelText = cancelText || t.cancel;
  }
  onOpen() {
    const { contentEl, titleEl } = this;
    titleEl.setText(this.title);
    contentEl.createEl("p", { text: this.message });
    new import_obsidian2.Setting(contentEl).addButton(
      (btn) => btn.setButtonText(this.cancelText).onClick(() => {
        this.result = false;
        this.close();
      })
    ).addButton(
      (btn) => btn.setButtonText(this.confirmText).setCta().onClick(() => {
        this.result = true;
        this.close();
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.resolvePromise) {
      this.resolvePromise(this.result);
    }
  }
  /**
   * 打开模态框并返回一个Promise，如果确认则返回true，否则返回false
   */
  async openAndAwait() {
    return new Promise((resolve) => {
      this.resolvePromise = resolve;
      this.open();
    });
  }
};

// src/component/dataTable.ts
var _DataTable = class {
  // 默认降序排列（最新的在前）
  constructor(options) {
    this.currentPage = 1;
    this.containerEl = options.containerEl;
    this.plugin = options.plugin;
    this.app = options.app;
    this.onDataChanged = options.onDataChanged;
    this.currentPage = _DataTable.lastPage;
  }
  render() {
    const t = getTranslation();
    const dataSection = this.containerEl.createDiv("data-table-section");
    dataSection.createEl("h3", { text: t.scrollData });
    dataSection.createEl("p", { text: t.scrollDataDesc });
    if (this.plugin.settings.scrollHeightData.size > 0) {
      const tableContainer = dataSection.createDiv("table-container");
      tableContainer.style.maxHeight = "300px";
      tableContainer.style.overflowY = "auto";
      tableContainer.style.marginBottom = "10px";
      const table = tableContainer.createEl("table");
      table.style.width = "100%";
      const thead = table.createEl("thead");
      thead.style.textAlign = "left";
      const headerRow = thead.createEl("tr");
      this.createSortableHeader(headerRow, "fileName", t.table_fileName);
      this.createSortableHeader(headerRow, "height", t.table_scrollHeight);
      this.createSortableHeader(headerRow, "lastAccessed", t.table_lastAccessed);
      headerRow.createEl("th", { text: t.table_actions });
      const tbody = table.createEl("tbody");
      tbody.style.textAlign = "left";
      tbody.style.padding = "20px";
      let entries = Array.from(this.plugin.settings.scrollHeightData.entries());
      entries = this.sortEntries(entries);
      const totalItems = entries.length;
      const pageSize = this.plugin.settings.pageSize;
      const totalPages = Math.ceil(totalItems / pageSize);
      if (this.currentPage > totalPages) {
        this.currentPage = totalPages > 0 ? totalPages : 1;
      }
      const startIndex = (this.currentPage - 1) * pageSize;
      const endIndex = Math.min(startIndex + pageSize, totalItems);
      const currentPageData = entries.slice(startIndex, endIndex);
      currentPageData.forEach(([filename, data]) => {
        var _a, _b;
        const row = tbody.createEl("tr");
        row.createEl("td", { text: filename });
        row.createEl("td", { text: `${(_b = (_a = data.height) == null ? void 0 : _a.toFixed(0)) != null ? _b : t.undefined}` });
        const lastAccessedDate = (data == null ? void 0 : data.lastAccessed) ? new Date(data.lastAccessed) : null;
        const formattedDate = lastAccessedDate ? lastAccessedDate.toLocaleString() : t.never;
        row.createEl("td", { text: formattedDate });
        const actionCell = row.createEl("td");
        const deleteBtn = actionCell.createEl("button", { text: t.delete });
        deleteBtn.addEventListener("click", async () => {
          const confirmModal = new ConfirmModal(this.app, { message: t.confirmClearMessage + "-[" + filename + "]" });
          const confirmed = await confirmModal.openAndAwait();
          if (confirmed) {
            this.plugin.settings.scrollHeightData.delete(filename);
            await this.plugin.saveSettings();
            this.onDataChanged();
          }
        });
      });
      const paginationContainer = dataSection.createDiv("pagination-container");
      paginationContainer.style.display = "flex";
      paginationContainer.style.justifyContent = "space-between";
      paginationContainer.style.alignItems = "center";
      paginationContainer.style.marginTop = "10px";
      const itemCountDiv = paginationContainer.createDiv("item-count");
      itemCountDiv.setText(`${t.totalItems}: ${totalItems}`);
      const paginationControls = paginationContainer.createDiv("pagination-controls");
      paginationControls.style.display = "flex";
      paginationControls.style.alignItems = "center";
      paginationControls.style.gap = "10px";
      const prevBtn = paginationControls.createEl("button", { text: t.prevPage });
      prevBtn.disabled = this.currentPage <= 1;
      prevBtn.addEventListener("click", () => {
        if (this.currentPage > 1) {
          this.currentPage--;
          _DataTable.lastPage = this.currentPage;
          this.onDataChanged();
        }
      });
      const pageInfo = paginationControls.createSpan();
      pageInfo.setText(`${this.currentPage} / ${totalPages}`);
      const nextBtn = paginationControls.createEl("button", { text: t.nextPage });
      nextBtn.disabled = this.currentPage >= totalPages;
      nextBtn.addEventListener("click", () => {
        if (this.currentPage < totalPages) {
          this.currentPage++;
          _DataTable.lastPage = this.currentPage;
          this.onDataChanged();
        }
      });
    } else {
      dataSection.createEl("p", { text: t.noDataAvailable });
    }
  }
  // 创建可排序的表头
  createSortableHeader(headerRow, field, text) {
    const th = headerRow.createEl("th");
    const headerContent = th.createSpan({ text });
    const sortIndicator = th.createSpan({ cls: "sort-indicator" });
    if (this.sortField === field) {
      sortIndicator.setText(this.sortDirection === "asc" ? " \u2191" : " \u2193");
    }
    th.style.cursor = "pointer";
    th.addEventListener("click", () => {
      if (this.sortField === field) {
        this.sortDirection = this.sortDirection === "asc" ? "desc" : "asc";
      } else {
        this.sortField = field;
        this.sortDirection = field === "fileName" ? "asc" : "desc";
      }
      this.onDataChanged();
    });
  }
  // 根据当前排序设置对条目进行排序
  sortEntries(entries) {
    return entries.sort((a, b) => {
      let result;
      switch (this.sortField) {
        case "fileName":
          result = a[0].localeCompare(b[0]);
          break;
        case "height":
          const heightA = a[1].height || 0;
          const heightB = b[1].height || 0;
          result = heightA - heightB;
          break;
        case "lastAccessed":
        default:
          const timeA = a[1].lastAccessed || 0;
          const timeB = b[1].lastAccessed || 0;
          result = timeA - timeB;
          break;
      }
      return this.sortDirection === "asc" ? result : -result;
    });
  }
  get sortField() {
    return _DataTable.sortField;
  }
  set sortField(value) {
    _DataTable.sortField = value;
  }
  get sortDirection() {
    return _DataTable.sortDirection;
  }
  set sortDirection(value) {
    _DataTable.sortDirection = value;
  }
  getCurrentPage() {
    return this.currentPage;
  }
  setCurrentPage(page) {
    this.currentPage = page;
    _DataTable.lastPage = page;
  }
};
var DataTable = _DataTable;
DataTable.lastPage = 1;
// 静态变量保存上次页码
DataTable.sortField = "lastAccessed";
// 默认排序字段
DataTable.sortDirection = "desc";

// src/utils/dataExportImportUtil.ts
var import_obsidian3 = require("obsidian");
var DataExportImportUtil = class {
  /**
   * 导出滚动位置数据到文本文件
   * @param plugin 插件实例
   */
  static exportData(plugin) {
    const t = getTranslation();
    if (plugin.settings.scrollHeightData.size === 0) {
      new import_obsidian3.Notice(t.noDataToExport);
      return;
    }
    const dataToExport = Array.from(plugin.settings.scrollHeightData.entries()).map(([filename, data]) => ({
      filename,
      height: data.height,
      lastAccessed: data.lastAccessed
    }));
    const jsonString = JSON.stringify(dataToExport, null, 2);
    const blob = new Blob([jsonString], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const downloadLink = document.createElement("a");
    downloadLink.href = url;
    downloadLink.download = `obsidian-last-position-export-${new Date().toISOString().slice(0, 10)}.txt`;
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
    URL.revokeObjectURL(url);
    new import_obsidian3.Notice(t.dataExported);
  }
  /**
   * 从文本文件导入滚动位置数据
   * @param plugin 插件实例
   * @param onComplete 导入完成后的回调函数
   */
  static importData(plugin, onComplete) {
    const t = getTranslation();
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = ".txt,text/plain";
    fileInput.addEventListener("change", async (event) => {
      const target = event.target;
      const files = target.files;
      if (!files || files.length === 0) {
        return;
      }
      const file = files[0];
      const reader = new FileReader();
      reader.onload = async (e) => {
        var _a, _b;
        try {
          const content = (_a = e.target) == null ? void 0 : _a.result;
          const importedData = JSON.parse(content);
          if (!Array.isArray(importedData)) {
            throw new Error("\u65E0\u6548\u7684\u6570\u636E\u683C\u5F0F");
          }
          let importCount = 0;
          for (const item of importedData) {
            if (item.filename && (item.height !== void 0 || item.lastAccessed)) {
              plugin.settings.scrollHeightData.set(item.filename, {
                height: item.height,
                lastAccessed: item.lastAccessed || Date.now()
              });
              importCount++;
            }
          }
          await plugin.saveSettings();
          onComplete();
          new import_obsidian3.Notice(((_b = t.dataImported) == null ? void 0 : _b.replace("{count}", importCount.toString())) || `Imported ${importCount} scroll position records`);
        } catch (error) {
          console.error("Import error:", error);
          new import_obsidian3.Notice(t.importError);
        }
      };
      reader.readAsText(file);
    });
    fileInput.click();
  }
};

// src/setting.ts
var DEFAULT_SETTINGS = {
  myInterval: 3,
  myRetryCount: 30,
  //数据
  scrollHeightData: /* @__PURE__ */ new Map(),
  //监听事件
  listenEvent: "mouseover",
  //表格每页显示的条目数,默认10条
  pageSize: 10,
  //是否启用数据自动清理
  enableAutoCleanup: false,
  //数据自动清理天数,默认30天
  cleanupDays: 30,
  //数据管理设置是否展开
  dataManagementSettingsOpen: false
};
var AutoSaveScrollSettingsTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.dataTable = null;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const t = getTranslation();
    new import_obsidian4.Setting(containerEl).setName(t.autoSave).setDesc(t.autoSaveDesc).addText((text) => text.setPlaceholder(t.inputInterval).setValue(this.plugin.settings.myInterval.toString()).onChange(async (value) => {
      const interval = Number(value);
      if (!isNaN(interval) && interval > 0) {
        this.plugin.settings.myInterval = interval;
        await this.plugin.saveSettings();
        new import_obsidian4.Notice(t.restartNotice);
      }
    }));
    new import_obsidian4.Setting(containerEl).setName(t.retryCount).setDesc(t.retryCountDesc).addText((text) => text.setPlaceholder(t.inputRetryCount).setValue(this.plugin.settings.myRetryCount.toString()).onChange(async (value) => {
      const retryCount = Number(value);
      if (!isNaN(retryCount) && retryCount > 0) {
        this.plugin.settings.myRetryCount = retryCount;
        await this.plugin.saveSettings();
        new import_obsidian4.Notice(t.restartNotice);
      }
    }));
    new import_obsidian4.Setting(containerEl).setName(t.listenEvent).setDesc(t.listenEventDesc).addDropdown(
      (dropdown) => dropdown.addOption("mouseover", "\u9F20\u6807\u60AC\u505C(mouseover)").addOption("click", "\u9F20\u6807\u70B9\u51FB(click)").addOption("scroll", "\u6EDA\u52A8(scroll)").setValue(this.plugin.settings.listenEvent).onChange(async (value) => {
        this.plugin.settings.listenEvent = value;
        await this.plugin.saveSettings();
        new import_obsidian4.Notice(t.restartNotice);
      })
    );
    new import_obsidian4.Setting(containerEl).setName(t.pageSize).setDesc(t.pageSizeDesc).addDropdown((dropdown) => {
      dropdown.addOption("5", "5").addOption("10", "10").addOption("20", "20").addOption("50", "50").setValue(this.plugin.settings.pageSize.toString()).onChange(async (value) => {
        const pageSize = Number(value);
        this.plugin.settings.pageSize = pageSize;
        if (this.dataTable) {
          this.dataTable.setCurrentPage(1);
        }
        await this.plugin.saveSettings();
        this.display();
      });
    });
    this.buildDataManagementSettings(containerEl.createEl("details", {
      cls: "lastposition-nested-settings",
      attr: {
        ...this.plugin.settings.dataManagementSettingsOpen ? { open: true } : {}
      }
    }));
    this.dataTable = new DataTable({
      containerEl,
      plugin: this.plugin,
      app: this.app,
      onDataChanged: () => {
        this.display();
      }
    });
    if (this.dataTable) {
      const currentPage = this.dataTable.getCurrentPage();
      this.dataTable.render();
      this.dataTable.setCurrentPage(currentPage);
    }
  }
  buildDataManagementSettings(containerEl) {
    const t = getTranslation();
    containerEl.empty();
    const summary = containerEl.createEl("summary", { cls: "lastposition-nested-settings" });
    summary.setText(t.dataManagement);
    new import_obsidian4.Setting(containerEl).setName(t.enableAutoCleanup).setDesc(t.enableAutoCleanupDesc).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.enableAutoCleanup).onChange(async (value) => {
        new import_obsidian4.Notice(t.cleanupDaysNotice);
        this.plugin.settings.enableAutoCleanup = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian4.Setting(containerEl).setName(t.cleanupDays).setDesc(t.cleanupDaysDesc).addSlider((slider) => {
      slider.setLimits(7, 365, 1).setValue(this.plugin.settings.cleanupDays).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.cleanupDays = value;
        await this.plugin.saveSettings();
      });
    });
    const importExportSetting = new import_obsidian4.Setting(containerEl).setName(t.dataImportExport).setDesc(t.dataImportExportDesc);
    importExportSetting.addButton((button) => {
      button.setButtonText(t.exportData).setCta().onClick(async () => {
        DataExportImportUtil.exportData(this.plugin);
      });
    });
    importExportSetting.addButton((button) => {
      button.setButtonText(t.importData).onClick(async () => {
        DataExportImportUtil.importData(this.plugin, () => {
          this.display();
        });
      });
    });
  }
};

// src/main.ts
var LastPositionPlugin = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    // 右下角状态栏用于显示滚动高度
    this.isLoading = false;
  }
  //是否正在跳转至目标高度
  async onload() {
    await this.loadSettings();
    const lang = getLanguage();
    if (!TRANSLATIONS[lang]) {
      new import_obsidian5.Notice(`[Last-Position-Plugin]:Language "${lang}" not supported. Falling back to English.`);
    }
    const t = getTranslation();
    this.statusBarItemEl = this.addStatusBarItem();
    this.statusBarItemEl.setText(`${t.currentHeight}: ${this.scrollHeight || 0}`);
    this.app.workspace.onLayoutReady(() => {
      this.readOpenFileInfo();
      this.registerInterval(window.setInterval(() => {
        if (this.isLoading) {
          return;
        }
        if (!this.fileName) {
          console.warn(t.noActiveView);
          this.readOpenFileInfo();
          return;
        }
        if (!this.scrollHeight) {
          return;
        }
        this.settings.scrollHeightData.set(this.fileName, {
          height: this.scrollHeight,
          lastAccessed: Date.now()
        });
        this.saveSettings();
        this.flashStatusBar();
      }, this.settings.myInterval * 1e3));
    });
    this.addSettingTab(new AutoSaveScrollSettingsTab(this.app, this));
    this.registerDomEvent(document, this.settings.listenEvent, (ev) => {
      var _a;
      const view = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      this.scrollHeight = view == null ? void 0 : view.currentMode.getScroll();
      this.statusBarItemEl.setText(`${t.currentHeight}: ${(_a = this.scrollHeight) == null ? void 0 : _a.toFixed(0)}`);
    });
    if (this.settings.enableAutoCleanup) {
      this.cleanupOldData();
    }
  }
  /**
   * 闪烁状态栏
   */
  flashStatusBar() {
    var _a;
    const t = getTranslation();
    const originalText = this.statusBarItemEl.getText();
    const originalColor = this.statusBarItemEl.style.color;
    this.statusBarItemEl.style.color = "var(--text-success, #50fa7b)";
    this.statusBarItemEl.setText(`${t.currentHeight}: ${((_a = this.scrollHeight) == null ? void 0 : _a.toFixed(0)) || 0}`);
    setTimeout(() => {
      this.statusBarItemEl.style.color = originalColor;
      this.statusBarItemEl.setText(originalText);
    }, 500);
  }
  async readOpenFileInfo() {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
    const t = getTranslation();
    if (!view) {
      console.warn(t.noActiveView);
      return;
    } else {
      const file = view.file;
      if (!file)
        throw new Error(t.getFileError);
      this.fileName = file.path;
      this.previewScrollTO();
    }
    this.registerEvent(
      this.app.workspace.on("file-open", async (file) => {
        if (!file)
          throw new Error(t.getFileError);
        this.fileName = file.path;
        this.previewScrollTO();
      })
    );
  }
  /**
   * 采用重试策略
   */
  async previewScrollTO() {
    this.isLoading = true;
    const lastPositionData = this.settings.scrollHeightData.get(this.fileName);
    const t = getTranslation();
    if (lastPositionData && lastPositionData.height !== void 0) {
      let retryCount = 0;
      const maxRetries = this.settings.myRetryCount;
      const targetHeight = lastPositionData.height;
      const retry = () => {
        if (retryCount >= maxRetries) {
          console.warn(t.retryLimit);
          new import_obsidian5.Notice(t.retryLimit);
          this.isLoading = false;
          return;
        }
        retryCount++;
        const view = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
        if (!view) {
          setTimeout(retry, 100);
          return;
        }
        view.currentMode.applyScroll(targetHeight);
        this.scrollHeight = view.currentMode.getScroll();
        if (Math.abs(this.scrollHeight - targetHeight) > 1) {
          setTimeout(retry, 100);
        } else {
          this.isLoading = false;
        }
      };
      retry();
    } else {
      this.isLoading = false;
    }
  }
  onunload() {
  }
  async loadSettings() {
    const loadedData = await this.loadData() || {};
    this.settings = Object.assign({}, DEFAULT_SETTINGS, loadedData);
    if (loadedData.scrollHeightData && !(loadedData.scrollHeightData instanceof Map)) {
      this.settings.scrollHeightData = new Map(
        Object.entries(loadedData.scrollHeightData).map(([key, value]) => {
          if (typeof value === "number") {
            return [key, {
              height: value,
              lastAccessed: Date.now()
            }];
          }
          return [key, value];
        })
      );
    }
  }
  async saveSettings() {
    const dataToSave = {
      ...this.settings,
      scrollHeightData: Object.fromEntries(this.settings.scrollHeightData)
    };
    await this.saveData(dataToSave);
  }
  /**
   * 清理过期数据
   */
  cleanupOldData() {
    if (!this.settings.enableAutoCleanup)
      return;
    const now = Date.now();
    const cutoffTime = now - this.settings.cleanupDays * 24 * 60 * 60 * 1e3;
    let cleanedCount = 0;
    for (const [path, data] of this.settings.scrollHeightData.entries()) {
      if (data.lastAccessed && data.lastAccessed < cutoffTime) {
        this.settings.scrollHeightData.delete(path);
        cleanedCount++;
      }
    }
    if (cleanedCount > 0) {
      console.log(`[Last-Position-Plugin]: Cleaned up ${cleanedCount} old entries`);
      this.saveSettings();
    }
  }
};


/* nosourcemap */